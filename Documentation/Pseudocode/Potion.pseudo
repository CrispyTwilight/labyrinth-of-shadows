// Auth: Christian A. Botos
// Date: 12/07/ 2023
// Desc: Header file for the Potion structure for holding data variables as pseudocode.

Include File "All_Includes.h"

Structure Potion Extends Item
{
	Enumerated PotionType 
		NONE, // Default value
		SMALL_HEAL,
		HALF_HEAL,
		FULL_HEAL,
		DOUBLE_HEAL,
		POTION_TYPE_COUNT, // Used to determine the number of possible potion types.
	End Enumerated;

	// Fields
	Declare Public PotionType type
	Declare Public Integer heal
	Declare Public Integer weight
	Declare Public String material

	// Constructor with default arguments.
	// All parameters are passed by const reference to avoid copying the arguments for efficiency.
	Module Potion(Constant Boolean& randomize = false, Constant PotionType& type = NONE, Constant Integer& heal = 10, Constant Integer& weight = 5, Constant Integer& value = 20, Constant String& name = "Default Name", Constant String& material = "Default Material")
		If (randomize)
			Dice typeDie(Potion::POTION_TYPE_COUNT - 1, 1)
			this->type = static_cast<PotionType>(typeDie.rollDice())

			Dice dmgDie(20, 1)
			this->heal = dmgDie.rollDice()

			Dice weightDie(20, 1)
			this->weight = weightDie.rollDice()

			Dice valueDie(20, 1)
			this->value = valueDie.rollDice()

			Dice nameDie(possiblePotionNames.size() - 1)
			this->name = possiblePotionNames[nameDie.rollDice()]

			Dice materialDie(possiblePotionMaterials.size() - 1)
			this->material = possiblePotionMaterials[materialDie.rollDice()]
		Else
			this->type = type
			this->heal = heal
			this->weight = weight
			this->value = value
			this->name = name
			this->material = material
		End If
	End Module
End Module

// Operating globally on the Potion struct. It is put in this file because it is related to the Potion struct.
Module String potionTypeToString(Potion::PotionType type)
	Switch (type)
	case Potion::SMALL_HEAL: return "Small Heal"
	case Potion::HALF_HEAL: return "Half Heal"
	case Potion::FULL_HEAL: return "Full Heal"
	case Potion::DOUBLE_HEAL: return "Double Heal"
	default: return "None"
	End Switch
End Module